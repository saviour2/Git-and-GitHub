----------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------[   Git and GitHub   ]------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

# INDEX ~

1.Git Main
    -> Git
    -> GitHub
    -> Version control
    -> Git version
    -> 







----------------------------------------------------------------------------------------------------------------------------------

# CONTENT ~

----------------------------------------------------------------------------------------------------------------------------------

{ Git } : 

> A software used for version control.
> It is a version control system that allows you to track changes to your files and collaborate with others. 
> It is used to manage the history of your code and to merge changes from different branches. 

----------------------------------------------------------------------------------------------------------------------------------

{ Github } : 

> An online service to host Git online.

----------------------------------------------------------------------------------------------------------------------------------

{ Version control } : 

> Tracks files for changes. ( Creating and handling checkpoints )
> They are used to manage the history of your code.

----------------------------------------------------------------------------------------------------------------------------------

{ Check git version } : 

=> git --version

----------------------------------------------------------------------------------------------------------------------------------

{ Repository } : 

> A repository is a collection of files and directories that are stored together. 
> It is a way to store and manage your code. A repository is like a folder on your computer, 
> but it is more than just a folder. It can contain other files, folders, and even other repositories. 
> You can think of a repository as a container that holds all your code.

----------------------------------------------------------------------------------------------------------------------------------

{ Check current state of repo } :

=> git status

! Note : use 'q' to quit from the status

----------------------------------------------------------------------------------------------------------------------------------

{ Set config settings } :

=> git config --global user.email "your-email@example.com"
=> git config --global user.name "Your Name"

----------------------------------------------------------------------------------------------------------------------------------

{ Check config settings } :

=> git config --list

----------------------------------------------------------------------------------------------------------------------------------

{ Creating a repository } :

=> git init

----------------------------------------------------------------------------------------------------------------------------------

{ Change default branch globally } :

> Purpose:            Sets the default branch name for new repositories you create in the future.
> Scope:              Global (affects all new repos on your system).
> When it applies:    Only when you run git init (initialises a new repo).

> Example:            git config --global init.defaultBranch main
    Now, every time you run git init, the default branch will be main instead of master.


=> git config --global init.defaultBranch <name>

----------------------------------------------------------------------------------------------------------------------------------

{ Renames the current branch locally } :

> Purpose:            Renames the current branch in an existing repository.
> Scope:              Local (only affects the current repo).
> When it applies:    After a repo is already created.

> Example:            git branch -m main  # Renames the current branch to "main"
    If you’re on master, this changes it to main in that repo only.

=> git branch -m <name>

----------------------------------------------------------------------------------------------------------------------------------

{ Git workflow } : 

> Basic : WRITE -> ADD -> COMMIT

> Complete : git init -> WORKING DIRECTORY -> git add -> STAGING AREA -> git commit -> REPO -> git push -> GITHUB 

----------------------------------------------------------------------------------------------------------------------------------

{ Adding folder to staging area } : 

> Moves the file to staging area, not yet committed to the repo.

=> git add <file-name1> <file-name2>
=> git add . #add all files in the dir to repo

----------------------------------------------------------------------------------------------------------------------------------

{ Git commit } : Save the changes and makes your changes permanent to your repo.

=> git commit -m "message"

----------------------------------------------------------------------------------------------------------------------------------

{ Git log } :   

> This command will show you the history of your repository. 
> It will show you all the commits that were made to the repository.     
> You can use the --oneline flag to show only the commit message. 
> This will make the output more compact and easier to read.

=> git log
=> git log --oneline

! Note : use 'q' to quit from the log

----------------------------------------------------------------------------------------------------------------------------------

{ Remove files from add / unstage } :

=> git rm --cached <file-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Add VS Code as default commit editor } : 

=> git config --global core.editor "code --wait"

----------------------------------------------------------------------------------------------------------------------------------

{ Gitignore } : 

> Gitignore is a file that tells git which files and folders to ignore. 
> It is a way to prevent git from tracking certain files or folders. 
> You can create a gitignore file and add list of files and folders to ignore.

-> Create a .gitignore file
-> Add the file names in it to be ignored byt git ( example : node_modules, .env, .vscode, etc)

> Now, when you run the git status command, it will not show the node_modules, .env & .vscode folders as being tracked by git.

----------------------------------------------------------------------------------------------------------------------------------

{ Git Branches } :  

> Branches are a way to work on different versions of a project at the same time. 
> They allow you to create a separate line of development that can be worked on independently of the main branch. 
> This can be useful when you want to make changes to a project without affecting the main branch or when you want 
    to work on a new feature or bug fix.

=> git branch                   # This command lists all the branches in the current repository.
=> git branch bug-fix           # This command creates a new branch called bug-fix.
=> git switch bug-fix           # This command switches to the bug-fix branch.
=> git log                      # This command shows the commit history for the current branch.
=> git switch main              # This command switches to the main branch.
=> git switch -c dark-mode      # This command creates and switches to new branch called dark-mode. 
                                    The -c flag is used to create a new branch.
=> git checkout orange-mode     # This command switches to the orange-mode branch. !!! Don't use until sure.

----------------------------------------------------------------------------------------------------------------------------------

{ HEAD in git } :

> The HEAD is a pointer to the current branch that you are working on. 
> It points to the latest commit in the current branch. When you create a new branch, 
> it is automatically set as the HEAD of that branch.

----------------------------------------------------------------------------------------------------------------------------------

{ Merging branches } : 

> In Git we have two types of merges :
    -> Fast-Forward Merges (If branches have not diverged)
    -> 3-Way Merges (if branches have diverged)

----------------------------------------------------------------------------------------------------------------------------------

{ Fast-forward merge } : 

> This one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.
> When you are done working on a branch, you can merge it back into the main branch.

=> git checkout main
=> git merge <branch-name>

> This is a fast-forward merge. It means that the commits in the <branch-name> branch are directly merged into the main branch. 
> This can be useful when you want to merge a branch that has already been pushed to the remote repository.

----------------------------------------------------------------------------------------------------------------------------------

{ 3 Way merge } : 

> In this type of merge, the main branch has additional commits that are not present in the bug-fix branch. 
> This is not a fast-forward merge. Here git looks at 3 different commits [common ancestor of branches + tips of each branch] 
    and combines the changes into one merge commit.

=> git checkout main
=> git merge <branch-name>

! Note : If the command are same, what is the difference between fast-forward and not fast-forward merge?

> The difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. 
> But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them. 
> You have to manually resolve the conflicts. Decide, what to keep and what to discard. 
> VSCode has a built-in merge tool that can help you resolve the conflicts.

----------------------------------------------------------------------------------------------------------------------------------

{ Rename a branch } :

=> git branch -m <old-branch-name> <new-branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Delete a branch } :

=> git branch -d <branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Checkout a branch } :

=> git checkout <branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Abort git merge } :

=> git merge --abort

----------------------------------------------------------------------------------------------------------------------------------

{ Git diff } :  

> It is an informative command that shows the differences between two commits. 
> It is used to compare the changes made in one commit with the changes made in another commit. 
> Git consider the changed versions of same file as two different files. 
> Then it gives names to these two files and shows the differences between them.
> Git diff will show you the changes made in the file A and file B. 
> It will also show you the line number where the change occurred along with little preview of the change.

----------------------------------------------------------------------------------------------------------------------------------

{ How to Read the Diff Output } : 

> a/ – the original file (before changes)
> b/ – the updated file (after changes)
> --- – marks the beginning of the original file
> +++ – marks the beginning of the updated file
> @@ – shows the line numbers and position of changes

----------------------------------------------------------------------------------------------------------------------------------

{ Comparing Working Directory and Staging Area } : 

> This command shows the unstaged changes in your working directory compared to the staging area. 
> This command alone will not show you the changes made in the file A & file B, you need to provide options to show the changes.

=> git diff  

----------------------------------------------------------------------------------------------------------------------------------

{ Comparing Staging Area with Repositor } : 

> This command shows the changes between your last commit and the staging area 
    (i.e., changes that are staged and ready to be committed).

=> git diff --staged

----------------------------------------------------------------------------------------------------------------------------------

{ Comparing Two Branches } :

> This command compares the difference between two branches.

=> git diff <branch-name-one> <branch-name-two>

 - or -

=> git diff branch-name-one..branch-name-two

----------------------------------------------------------------------------------------------------------------------------------

{ Comparing Specific Commits } :

> This command compares the difference between two commits.

=> git diff <commit-hash-one> <commit-hash-two>

----------------------------------------------------------------------------------------------------------------------------------

{ Git Stash } :

> Stash is a way to save your changes in a temporary location. 
> It’s useful when switching branches without losing work. You can then come back to the file later and apply the changes.
> Conflicting changes will not allow you to switch branches without committing the changes. 
> Another alternative is to use the git stash command to save your changes in a temporary location.

=> git stash

----------------------------------------------------------------------------------------------------------------------------------

{ Naming the stash } :

=> git stash save "work in progress on X feature"

----------------------------------------------------------------------------------------------------------------------------------

{ View the stash list } :

=> git stash list

----------------------------------------------------------------------------------------------------------------------------------

{ Apply the Most Recent Stash } :

=> git stash apply

----------------------------------------------------------------------------------------------------------------------------------

{ Apply Specific Stash } :

=> git stash apply stash@{0}

! Note : Here stash@{0} is the name of the stash. You can use the git stash list command to get the name of the stash.

----------------------------------------------------------------------------------------------------------------------------------

{ Applying and Dropping a Stash } :

=> git stash pop

----------------------------------------------------------------------------------------------------------------------------------

{ Drop the stash } :

=> git stash drop

----------------------------------------------------------------------------------------------------------------------------------

{ Applying stash to a specific branch } :

=> git stash apply stash@{0} <branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Clearing the stash } : 

=> git stash clear

----------------------------------------------------------------------------------------------------------------------------------

{ Git Tags } :

> Tags are a way to mark a specific point in your repository. 
> They are useful when you want to remember a specific version of your code or when you want to refer to a specific commit. 
> Tags are like sticky notes that you can attach to your commits.

! Note : Tags are very rarely used and should be done so mostly on final deployment versions.

----------------------------------------------------------------------------------------------------------------------------------

{ Creating a tag } : 

=> git tag <tag-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Create an annotated tag } :

> This command creates an annotated tag with the specified name and message. 
> The tag will be attached to the current commit.

=> git tag -a <tag-name> -m "Release 1.0"

----------------------------------------------------------------------------------------------------------------------------------

{ List all tags } :

=> git tag

----------------------------------------------------------------------------------------------------------------------------------

{ Tagging a specific commit } :

=> git tag <tag-name> <commit-hash>

----------------------------------------------------------------------------------------------------------------------------------

{ Push tags to remote repository } :

=> git push origin <tag-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Delete a tag } :

=> git tag -d <tag-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Delete tag on remote repository } :

=> git push origin :<tag-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Merge commits } : 

> A merge commit is a commit that combines two or more commits into one. 
> It is created when you merge two or more branches into a single branch. 
> The merge commit contains all the changes from the original branches, and it is used to keep the project history clean and 
    easy to understand.

----------------------------------------------------------------------------------------------------------------------------------

{ Rebase in git } :

> Git rebase is a powerful Git feature used to change the base of a branch. 
> It effectively allows you to move a branch to a new starting point, usually a different commit, by “replaying” the commits 
    from the original base onto the new base. 
> This can be useful for keeping a cleaner, linear project history.
> Some people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to 
    understand. 
> It also allows you to make changes to the code without affecting the original branch.

----------------------------------------------------------------------------------------------------------------------------------

{ Rebase workflow } :

> Ensure you are on the branch you want to rebase.
    -> This will replay the commits from feature-branch on top of the latest changes in main.

=> git checkout <branch-name>
=> git rebase main

> Resolve any conflicts
    -> If there are any conflicts, you will need to resolve them manually. 
    -> You can use the merge tool in VSCode to resolve the conflicts.

=> git add <resolved-files>
=> git rebase --continue

! Note : Try to avoid —force option when using rebase. It can cause issues with the project history. 
----------------------------------------------------------------------------------------------------------------------------------
{ Change commit message } :

> If you just need to change the message of the most recent commit that hasn't been pushed yet.

=> git commit --amend

----------------------------------------------------------------------------------------------------------------------------------

{ Git reflog } :

> Git reflog is a command that shows you the history of your commits. 
> It allows you to see the changes that you have made to your repository over time. 
> This can be useful for debugging and understanding the history of your project.

=> git reflog

> This will show you the history of your commits. 
> You can use the number at the end of each line to access the commit that you want to view.

----------------------------------------------------------------------------------------------------------------------------------

{ Find specific commit } :

=> git reflog <commit-hash>

----------------------------------------------------------------------------------------------------------------------------------

{ Recover lost commits or changes } :

> If you accidentally deleted a branch or made changes that are no longer visible in the commit history, you can often 
    recover them using the reflog. 
> First, find the reference to the commit where the branch or changes existed, and then reset your branch to that reference.

=> git reflog <commit-hash>
=> git reset --hard <commit-hash>

- or -

> or you can use HEAD@{n} to reset to the nth commit before the one you want to reset to.

=> git reflog <commit-hash>
=> git reset --hard HEAD@{1}

----------------------------------------------------------------------------------------------------------------------------------

{ Configuring Git } :

=> git config --global user.email "your-email@example.com"
=> git config --global user.name "Your Name"

> This will set your email and name as your global settings. 
> You can change these settings at any time by running the same command again.

----------------------------------------------------------------------------------------------------------------------------------

{ Setup SSH Key } :

> Need to setup ssh key and add it to your github account. 
> You can do this by following the instructions on the Github website.
> You can find the exact steps on the website for both Windows and MacOS. 
> The steps are same for both, only apple users need to add the ssh key to their keychain. ( find using spotlight search )

    -> Generate a new SSH key

        => ssh-keygen -t ed25519 -C "your-email@chaicode.com"

        > Here ed25519 is the type of key that you are generating. 
        > This creates a new SSH key, using the provided email as label.
    
    -> Save the key

        > After generating the key, you need to save it to your computer. 
        > You can do this by running the following command:
        > Enter a file in which to save the key 
        
        => /Users/YOU/.ssh/id_ALGORITHM : [Press enter]

        > At the prompt you can enter passphrase for the key or you can leave it blank. 
        > If you leave it blank, the key will be saved without a passphrase.

    -> Add key to your ssh-agent

        > After saving the key, you need to add it to your ssh-agent. 
        > You can do this by running the following command:
        > Here it is best to refer above link for more information, as Github has a lot of information on this. 
        > There is no point in repeating it here.

    -> Add key to github

        > Use the web ui to add the key to your github account. 
        > You can do this by following the instructions on the Github website.

----------------------------------------------------------------------------------------------------------------------------------

{ Publish Code to Remote Repository } :

> Create a new Repo on your system first, add some code and commit it.

=> git init
=> git add <files>
=> git commit -m "commit message"

> Remote URL Setting

=> git remote -v

> Add Remote Repository

=> git remote add origin <remote-url>

> Pushing Code

=> git push remote-name branch-name

- or -

=> git push origin main