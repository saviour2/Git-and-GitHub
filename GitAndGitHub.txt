----------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------[   Git and GitHub   ]------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------




{ Git } : 

> A software used for version control.
> It is a version control system that allows you to track changes to your files and collaborate with others. 
> It is used to manage the history of your code and to merge changes from different branches. 

----------------------------------------------------------------------------------------------------------------------------------

{ Github } : 

> An online service to host Git online.

----------------------------------------------------------------------------------------------------------------------------------

{ Version control } : 

> Tracks files for changes. ( Creating and handling checkpoints )
> They are used to manage the history of your code.

----------------------------------------------------------------------------------------------------------------------------------

{ Check git version } : 

=> git --version

----------------------------------------------------------------------------------------------------------------------------------

{ Repository } : 

> A repository is a collection of files and directories that are stored together. 
> It is a way to store and manage your code. A repository is like a folder on your computer, 
> but it is more than just a folder. It can contain other files, folders, and even other repositories. 
> You can think of a repository as a container that holds all your code.

----------------------------------------------------------------------------------------------------------------------------------

{ Check current state of repo } :

=> git status

! Note : use 'q' to quit from the status

----------------------------------------------------------------------------------------------------------------------------------

{ Set config settings } :

=> git config --global user.email "your-email@example.com"
=> git config --global user.name "Your Name"

----------------------------------------------------------------------------------------------------------------------------------

{ Check config settings } :

=> git config --list

----------------------------------------------------------------------------------------------------------------------------------

{ Creating a repository } :

=> git init

----------------------------------------------------------------------------------------------------------------------------------

{ Change default branch globally } :

> Purpose:            Sets the default branch name for new repositories you create in the future.
> Scope:              Global (affects all new repos on your system).
> When it applies:    Only when you run git init (initialises a new repo).

> Example:            git config --global init.defaultBranch main
    Now, every time you run git init, the default branch will be main instead of master.


=> git config --global init.defaultBranch <name>

----------------------------------------------------------------------------------------------------------------------------------

{ Renames the current branch locally } :

> Purpose:            Renames the current branch in an existing repository.
> Scope:              Local (only affects the current repo).
> When it applies:    After a repo is already created.

> Example:            git branch -m main  # Renames the current branch to "main"
    If youâ€™re on master, this changes it to main in that repo only.

=> git branch -m <name>

----------------------------------------------------------------------------------------------------------------------------------

{ Git workflow } : 

> Basic : WRITE -> ADD -> COMMIT

> Complete : git init -> WORKING DIRECTORY -> git add -> STAGING AREA -> git commit -> REPO -> git push -> GITHUB 

----------------------------------------------------------------------------------------------------------------------------------

{ Adding folder to staging area } : 

> Moves the file to staging area, not yet committed to the repo.

=> git add <file-name1> <file-name2>
=> git add . #add all files in the dir to repo

----------------------------------------------------------------------------------------------------------------------------------

{ Git commit } : Save the changes and makes your changes permanent to your repo.

=> git commit -m "message"

----------------------------------------------------------------------------------------------------------------------------------

{ Git log } :   

> This command will show you the history of your repository. 
> It will show you all the commits that were made to the repository.     
> You can use the --oneline flag to show only the commit message. 
> This will make the output more compact and easier to read.

=> git log
=> git log --oneline

! Note : use 'q' to quit from the log

----------------------------------------------------------------------------------------------------------------------------------

{ Remove files from add / unstage } :

=> git rm --cached <file-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Add VS Code as default commit editor } : 

=> git config --global core.editor "code --wait"

----------------------------------------------------------------------------------------------------------------------------------

{ Gitignore } : 

> Gitignore is a file that tells git which files and folders to ignore. 
> It is a way to prevent git from tracking certain files or folders. 
> You can create a gitignore file and add list of files and folders to ignore.

-> Create a .gitignore file
-> Add the file names in it to be ignored byt git ( example : node_modules, .env, .vscode, etc)

> Now, when you run the git status command, it will not show the node_modules, .env & .vscode folders as being tracked by git.

----------------------------------------------------------------------------------------------------------------------------------

{ Git Branches } :  

> Branches are a way to work on different versions of a project at the same time. 
> They allow you to create a separate line of development that can be worked on independently of the main branch. 
> This can be useful when you want to make changes to a project without affecting the main branch or when you want 
    to work on a new feature or bug fix.

=> git branch                   # This command lists all the branches in the current repository.
=> git branch bug-fix           # This command creates a new branch called bug-fix.
=> git switch bug-fix           # This command switches to the bug-fix branch.
=> git log                      # This command shows the commit history for the current branch.
=> git switch main              # This command switches to the main branch.
=> git switch -c dark-mode      # This command creates and switches to new branch called dark-mode. 
                                    The -c flag is used to create a new branch.
=> git checkout orange-mode     # This command switches to the orange-mode branch. !!! Don't use until sure.

----------------------------------------------------------------------------------------------------------------------------------

{ HEAD in git } :

> The HEAD is a pointer to the current branch that you are working on. 
> It points to the latest commit in the current branch. When you create a new branch, 
> it is automatically set as the HEAD of that branch.

----------------------------------------------------------------------------------------------------------------------------------

{ Merging branches } : 

> In Git we have two types of merges :
    -> Fast-Forward Merges (If branches have not diverged)
    -> 3-Way Merges (if branches have diverged)

----------------------------------------------------------------------------------------------------------------------------------

{ Fast-forward merge } : 

> This one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.
> When you are done working on a branch, you can merge it back into the main branch.

=> git checkout main
=> git merge <branch-name>

> This is a fast-forward merge. It means that the commits in the <branch-name> branch are directly merged into the main branch. 
> This can be useful when you want to merge a branch that has already been pushed to the remote repository.

----------------------------------------------------------------------------------------------------------------------------------

{ 3 Way merge } : 

> In this type of merge, the main branch has additional commits that are not present in the bug-fix branch. 
> This is not a fast-forward merge. Here git looks at 3 different commits [common ancestor of branches + tips of each branch] 
    and combines the changes into one merge commit.

=> git checkout main
=> git merge <branch-name>

> Note : If the command are same, what is the difference between fast-forward and not fast-forward merge?

> The difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. 
> But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them. 
> You have to manually resolve the conflicts. Decide, what to keep and what to discard. 
> VSCode has a built-in merge tool that can help you resolve the conflicts.

----------------------------------------------------------------------------------------------------------------------------------

{ Rename a branch } :

=> git branch -m <old-branch-name> <new-branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Delete a branch } :

=> git branch -d <branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Checkout a branch } :

=> git checkout <branch-name>

----------------------------------------------------------------------------------------------------------------------------------

{ Abort git merge } :

=> git merge --abort

----------------------------------------------------------------------------------------------------------------------------------

{ Git diff } :  

> It is an informative command that shows the differences between two commits. 
> It is used to compare the changes made in one commit with the changes made in another commit. 
> Git consider the changed versions of same file as two different files. 
> Then it gives names to these two files and shows the differences between them.


----------------------------------------------------------------------------------------------------------------------------------

{ How to Read the Diff Output } : 

> a/ â€“ the original file (before changes)
> b/ â€“ the updated file (after changes)
> --- â€“ marks the beginning of the original file
> +++ â€“ marks the beginning of the updated file
> @@ â€“ shows the line numbers and position of changes

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------